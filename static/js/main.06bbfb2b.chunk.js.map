{"version":3,"sources":["View.js","Bp.js","Result.js","Kidney.js","App.js","index.js"],"names":["View","bpArrays","slice","map","bpArray","index","sysbp","diabp","atDate","status","Data","useState","bpData","localStorage","getItem","JSON","parse","getData","setBpArrays","setSysbp","setDiabp","setAtDate","setStatus","useEffect","setItem","stringify","className","autoComplete","onSubmit","e","preventDefault","type","placeholder","required","onChange","target","value","min","max","length","Result","kdArrays","kdArray","egfr","result","Kidney","setKdArrays","setEgfr","setResult","a","console","log","b","at","c","d","Math","abs","parseFloat","toFixed","App","props","state","selectedDate","message","Component","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.06bbfb2b.chunk.js","sourcesContent":["import React from 'react'\r\nconst View = ({bpArrays}) => {\r\n    return bpArrays.slice([-1]).map((bpArray, index) =>(\r\n        \r\n        <div key={index} >\r\n            <p >Systolic Pressure: {bpArray.sysbp}</p><br/>\r\n            <p>Diastolic Pressure: {bpArray.diabp}</p><br/>\r\n        <p>Date: {bpArray.atDate}</p><br/>\r\n            <p>Blood Pressure Status is on:  {bpArray.status}</p>\r\n        </div>\r\n    ))   \r\n}\r\nexport default View;","\r\nimport React,{useState,useEffect} from 'react'\r\n\r\n\r\nimport View from './View';\r\n// get data from local storage\r\nconst getData=()=>{\r\n    const bpData = localStorage.getItem('bpArrays');\r\n    if(bpData){\r\n        return JSON.parse(bpData);\r\n    }\r\n    else{\r\n        return []\r\n    }\r\n\r\n}\r\n\r\nconst Data = () => {\r\n\r\n    //array of objects\r\n    const [bpArrays, setBpArrays] = useState(getData());\r\n    //input field states\r\n    const[sysbp, setSysbp]= useState('');\r\n    const[diabp, setDiabp]= useState('');\r\n    const[atDate, setAtDate]= useState('');\r\n    const[status, setStatus]= useState('');\r\n    \r\n    \r\n    //form submit event\r\n    const handleClick=(e) => {\r\n        e.preventDefault();\r\n        let bpArray={  \r\n            sysbp,\r\n            diabp,\r\n            atDate,\r\n            status\r\n        }\r\n        setBpArrays([...bpArrays, bpArray]);\r\n        setSysbp(\"\");\r\n        setDiabp(\"\");\r\n        setAtDate(\"\");\r\n    }\r\n    useEffect(()=>{\r\n        if(sysbp>= 180 && diabp >=120){\r\n            setStatus(\" Stage 3\")\r\n                }else if((sysbp>=160 && sysbp < 180) &&\r\n                     (diabp >=100 && diabp < 110) ) \r\n                    { setStatus(\"Stage 2\")\r\n                     }\r\n                    else if((sysbp>=140 && sysbp < 160) &&(diabp >=90 && diabp < 100)) {setStatus(\"Stage 1\") }\r\n                         else{\r\n                             setStatus(\"Normal Stage\")\r\n                         }\r\n\r\n    },[sysbp, diabp]);\r\n\r\n    \r\n    //saving data ti local storage\r\n    useEffect(() =>{\r\n    localStorage.setItem('bpArrays', JSON.stringify(bpArrays));\r\n    }, [bpArrays]\r\n    )\r\n    \r\n\r\n    return (\r\n        <div >\r\n            <h1 data-testid=\"h1\">Disease Classifier</h1>\r\n\r\n<div className=\"form-container\">\r\n<form className=\"form\" autoComplete=\"off\"\r\nonSubmit={handleClick}>\r\n            <h3 data-testid=\"h2\"> Hypertension Calculator</h3>\r\n<label data-testid=\"l1\">Enter Date</label> <span>   </span>\r\n<input data-testid=\"input1\" type=\"date\"  placeholder=\"Pick a date \" required className=\"date-input\"onChange={(e)=> setAtDate(e.target.value)} value={atDate}/> <br/>\r\n<label data-testid=\"l2\">Systolic Pressure</label><span>   </span>\r\n    <input data-testid=\"input2\" type=\"number\" min=\"115\" max=\"180\" className=\"sysbp-input\" required  placeholder=\" mmHg\" onChange={(e) => setSysbp(e.target.value)} value={sysbp}></input>\r\n    <br/>\r\n    <label data-testid=\"l3\">Diastolic Pressure</label><span>   </span>\r\n    <input data-testid=\"input3\" type=\"number\" min=\"60\" max=\"120\"  placeholder=\"mmHg \"  className=\"diabp-input\" required \r\n    onChange={(e) => setDiabp(e.target.value)} value={diabp}></input>\r\n    <br/>\r\n    <button data-testid=\"btn\" type=\"submit\" className=\"btn-calc\">Calculate</button>\r\n</form>\r\n<div className=\"view-container\">\r\n    {bpArrays.length>0&& \r\n    <>\r\n    <div data-testid=\"p1\" className=\"results\">\r\n    \r\n    < View bpArrays={bpArrays}  />\r\n    </div>\r\n    </>}\r\n</div>\r\n</div> \r\n </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Data;\r\n","import React from \"react\";\r\nconst Result=({kdArrays})=>{\r\n   return kdArrays.slice([-1]).map((kdArray, index)=>( \r\n       <div\r\n           key={index}>\r\n           <p>eGFR : {kdArray.egfr}</p><br/>\r\n           <p>Date: {kdArray.atDate}</p><br/>\r\n           <p>Result: {kdArray.result}</p><br/>\r\n           <p className=\"display-inline\">Status:{kdArray.status}</p>\r\n          \r\n       </div>\r\n   ))\r\n   \r\n}\r\nexport default Result;","import React, {useState, useEffect} from \"react\";\r\nimport Result from \"./Result\";\r\n\r\nconst Kidney =() =>{\r\n    const [kdArrays, setKdArrays] = useState([]);\r\n    const[egfr, setEgfr]= useState(\"\");\r\n    const[atDate, setAtDate]= useState(\"\");\r\n    const[result, setResult] = useState(\"\");\r\n    const[status, setStatus] = useState([])\r\n    \r\n    const handleclick =(e)=>{\r\n        e.preventDefault();\r\n        \r\n        \r\n        let kdArray ={\r\n            egfr,\r\n            atDate ,\r\n            result,\r\n            status\r\n        }\r\n           // const compare =(kdArrays)=>{\r\n               \r\n               //  }\r\n               \r\n               setKdArrays([ ...kdArrays, kdArray]);\r\n               setEgfr(\"\");\r\n               setAtDate(\"\");\r\n//                kdArrays.forEach((element, index) => {\r\n//            if(kdArrays.length > 1){\r\n//                let a = kdArrays[0].egfr;\r\n//                console.log(\"first\",a);\r\n//                let b = kdArrays.at(-1).egfr;\r\n//                console.log(\"last\",b);\r\n//               let c = kdArrays.at(-2).egfr;\r\n// console.log(\"second last\",c);\r\n// let d = Math.abs(((b -c)/c)*100);\r\n// console.log(d,\"%\");\r\n// if(d <= -20){\r\n//    console.log(\"percentage drops by: \", d);\r\n//    setStatus(\"percentage drops by: \", d);\r\n// }\r\n//                //setStatus(a) ;\r\n//            }else {\r\n//                setStatus(\"Not enough data to calculate\") ;\r\n//            }\r\n          \r\n//        })\r\n \r\n \r\n}\r\nuseEffect(() => {\r\n    if(kdArrays.length > 1){\r\n        let a = kdArrays[0].egfr;\r\n        console.log(\"first\",a);\r\n        let b = kdArrays.at(-1).egfr;\r\n        console.log(\"last\",b);\r\n       let c = kdArrays.at(-2).egfr;\r\nconsole.log(\"second last\",c);\r\nlet d = Math.abs(((b -c)/c)*100);\r\nconsole.log(d,\"%\");\r\nif(d >= 20){\r\nconsole.log(\"percentage drops by: \", d);\r\nsetStatus(`Recent readings of eGFR: ${c} & ${b} \\n Your percentage drops by:  ${parseFloat(d).toFixed(1)}%`);\r\n}\r\n        //setStatus(a) ;\r\n     \r\n     else {\r\n        setStatus(`Last recent readings of eGFR: ${c} & ${b} \\n You are doing great !`) ;\r\n        console.log(\"no data\");\r\n    }}\r\n    \r\n        if(egfr>=90){\r\n                setResult(\"Normal\");\r\n            }\r\n            else if(egfr>=60 && egfr <= 89){\r\n                setResult(\"Mildly Decreased\")\r\n            }\r\n            else if(egfr>=45 && egfr <= 59){\r\n               setResult(\"Mild  to  Moderate\")\r\n            }\r\n             else  if(egfr>=30 && egfr <= 44){\r\n                   setResult(\"Moderate  to  Severe\")\r\n               }\r\n             else  if(egfr>=15 && egfr <= 29){\r\n                   setResult(\"Severely  Decreased\")\r\n               }\r\n            else{\r\n                setResult(\"Kidney Failure\")\r\n            }\r\n        \r\n    }\r\n   \r\n, [egfr,atDate,kdArrays]);\r\n\r\n// const res =(egfr)=>{\r\n//     let a = kdArrays[0].egfr;\r\n//     console.log(a);\r\n// }\r\n    \r\n    return(\r\n    <>\r\n\r\n        <div className=\"form-kidney\">\r\n      <form onSubmit= {handleclick}>\r\n        <h3 className=\"bp-h2\">Kidney Disease</h3>\r\n        <label>Enter Date</label> <span>   </span>\r\n<input type=\"date\"  placeholder=\"Pick a date \" required className=\"date-input\"onChange={(e)=> setAtDate(e.target.value)} value={atDate}/> <br/>\r\n        <label>GFR: </label>\r\n         <input className=\"kidney\" type=\"number\" placeholder=\"ml/min/1.73 m2\" min=\"15\" max=\"90\" onChange={(e) => setEgfr(e.target.value)} value={egfr} required ></input><br/>\r\n         <button type=\"submit\" className=\"btn-calc\" >Report</button>\r\n      </form><br/>\r\n        <Result kdArrays ={kdArrays}/>\r\n        </div>\r\n        {/* <div> <p>{setStatus.status}</p></div> */}\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Kidney;","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Data from \"./Bp\";\nimport Kidney from \"./Kidney\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedDate: \"\",\n      message: \"\"\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Data />\n        <br />\n        <Kidney></Kidney>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}